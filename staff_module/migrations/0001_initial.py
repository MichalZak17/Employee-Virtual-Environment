# Generated by Django 5.0 on 2023-12-28 10:57

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('project_id', models.AutoField(primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=100)),
                ('project_description', models.CharField(max_length=1000)),
                ('project_client', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Teams',
            fields=[
                ('team_id', models.AutoField(primary_key=True, serialize=False)),
                ('team_name', models.CharField(max_length=100)),
                ('team_description', models.CharField(max_length=1000)),
                ('team_team_lead', models.CharField(max_length=100)),
                ('team_language', models.CharField(choices=[('eng', 'English'), ('fre', 'French'), ('ger', 'German'), ('ita', 'Italian'), ('spa', 'Spanish')], default='eng', max_length=3)),
                ('team_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staff_module.projects')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_workday', models.IntegerField(default=0)),
                ('user_language', models.CharField(choices=[('eng', 'English'), ('fre', 'French'), ('ger', 'German'), ('ita', 'Italian'), ('spa', 'Spanish')], default='eng', max_length=3)),
                ('user_site', models.CharField(choices=[('szz', 'SZZ'), ('kat', 'KAT')], default='szz', max_length=3)),
                ('user_contract', models.CharField(choices=[('civil', 'Civil'), ('labour', 'Labour')], default='civil', max_length=6)),
                ('user_is_manager', models.BooleanField(default=False)),
                ('user_is_team_lead', models.BooleanField(default=False)),
                ('user_is_administrator', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('user_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='staff_module.teams')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
